/*Write a program for simple RSA algorithm to encrypt and decrypt the data.*/ 
 
/*RSA algorithm*/ 
import java.io.*; 
import java.math.*; 
import java.nio.charset.*; 
import java.util.*; 
 
public class RSA{ 
    private BigInteger p, q, N, phi, e, d; 
    private int bitLength = 1024; 
    private Random r; 
 
    public RSA() { 
        r = new Random(); 
        p = BigInteger.probablePrime(bitLength, r); 
        q = BigInteger.probablePrime(bitLength, r); 
        System.out.println("Prime number p is " + p); 
        System.out.println("Prime number q is " + q); 
        N = p.multiply(q); 
        phi = p.subtract(BigInteger.ONE).multiply(q.subtract(BigInteger.ONE)); 
        e = BigInteger.probablePrime(bitLength / 2, r); 
 
        while (phi.gcd(e).compareTo(BigInteger.ONE) > 0 && e.compareTo(phi) < 0) { 
            e = e.add(BigInteger.ONE); 
        } 
 
        System.out.println("Public key is " + e); 
        d = e.modInverse(phi); 
        System.out.println("Private key is " + d); 
    } 
 
    public static void main(String[] args) throws IOException { 
        RSA rsa = new RSA(); 
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); 
        System.out.println("Enter the plain text: "); 
        String testString = br.readLine(); 
        System.out.println("Encrypting string: " + testString); 
        System.out.println("String in bytes: " + bytesToString(testString.getBytes())); 
        byte[] encrypted = rsa.encrypt(testString.getBytes()); 
        byte[] decrypted = rsa.decrypt(encrypted); 
        System.out.println("Decrypting Bytes: " + bytesToString(decrypted)); 
        System.out.println("Decrypted string: " + new String(decrypted, StandardCharsets.UTF_8)); 
    } 
 
    private static String bytesToString(byte[] encrypted) { 
        StringBuilder result = new StringBuilder(); 
        for (byte b : encrypted) { 
            result.append(Byte.toString(b)); 
        } 
        return result.toString(); 
    } 
 
    public byte[] encrypt(byte[] message) { 
        return (new BigInteger(message)).modPow(e, N).toByteArray(); 
    } 
 
    public byte[] decrypt(byte[] message) { 
        return (new BigInteger(message)).modPow(d, N).toByteArray(); 
    } 
} 
 
/*OUTPUT:- 
Prime number p is 
13530028113471787974690280836654109990397525128878928433464180783220768287112727
 15679207610554637290989244302877184218507461984994287950903383160701799098258711
 50136529664667741679224565002205330126017727809227066298450635996226617624131459
 287230966759830732923433622770966482580389693040579733621803440243969 
Prime number q is 
17056258475213693418725075670770966684923481850172431753895510799807498954503358
 28773272471298300498497509165984282281366368902196145285653336541885531199487434
 35910519651826713018595370044199045107161079680301688990314455906280489353568884
 786496504824152441495041826797939948169147055493631177589953202830599 
Public key is 
72138753751080380736720440212939751165520464731663470604616853295554752218639792
 86020739066801430989540112524679688665752398505800679918797492724602732629 
Private key is 
10232890632686766750034490725003930392084593823228026807007316149174387213961406
 66246676991920886203548324527726189056503719860211034605091455352678223091981743
 42171299388433901109473588613039251414833479020692513462743495835805281963329921
 25823275043989627727280400490424201408609643644386446514324925804227438978217612
 91862425154343255252583775026543171384094323231691736281136294303552307517561025
 43381671734743137179128108784926428622762115060974514650817907103560241718461908
 41405374195685479879435013937211177691241624425819247841855676866094306324786565
 09370462194940451391673893318824171257060825753452343549 
Enter the plain text:  
details are 1234 
Encrypting string: details are 1234 
String in bytes: 1001011169710510811532971141013249505152 
Decrypting Bytes: 1001011169710510811532971141013249505152 
Decrypted string: details are 1234 
 
Prime number p is 
10949299020550501620258626214292330778324704965329901558617062168185650376108388
 48885286952221916789488780419058574094398030870483663215176656320996601645268894
 23571756222428986041425545271269918402688374073491000864036264121388747037462508
 960933193885668914392055760834105261571349765885220586249294171612057 
Prime number q is 
93399612207412436969434052573879362077001296732671115601019322320721918743646170
 14289341452914224810062151881145226097379698003989033807324351021953761902793527
 31661033649721000495684780353503620757704924911486118268959724038184086629307168
 99590641308806028204738352163397228758697729876804042687524191528943 
Public key is 
81193504061826896588844936999750987970376503811057589411681055425648366029088367
 69468925573732813850917403491558512111708465544624034528481225595764959683 
Private key is 
16466139074775976227555630313712338336765486509882086135333540595950872634147816
 09760226724123721917746080305306947151587468685412435236353871419956817596174610
 64491565105974616167865041326877853293671007122004435544420835591749226951973897
 03910196853340283874587390837689469293340835723746011533959642146262338483709134
 08413749783925297686969970393800283392478327780433521493600773671785118071235453
 35056212818442166160772516879667966470002788766611423533706497013673654832221069
 43845676002585473496288415701027465885869257840125905844930717808278407850858542
 22142399589991793821810906202207476941901002997931306123 
Enter the plain text:  
hello there 
Encrypting string: hello there 
String in bytes: 10410110810811132116104101114101 
Decrypting Bytes: 10410110810811132116104101114101 
Decrypted string: hello there 
*/ 
